# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: arc-runner-set
    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        
    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Install dependencies
    - name: Install dependencies
      run: npm ci
      
    # Build node.js app
    - name: Build app
      run: npm run build --if-present

    # Set up Docker Buildx (for building Docker images)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.6.1

    # Login to container registry (similar to DockerHub login)
    - name: Log in to Container Registry
      run: |
        podman login -u "${{ secrets.DOCKER_USERNAME }}" -p ${{ secrets.DOCKER_PASSWORD }} docker.io
    
    # Build and tag container image using Buildah
    - name: Build and tag image with Buildah
      run: |
        sudo buildah bud --storage-driver=vfs --layers -t ${{ secrets.DOCKER_USERNAME }}/node-web-app:latest .
        sudo buildah tag ${{ secrets.DOCKER_USERNAME }}/node-web-app:latest ${{ secrets.DOCKER_USERNAME }}/node-web-app:${{ github.sha }}

    # Push both tags to the container registry using Podman
    - name: Push image to Container Registry
      run: |
        podman push ${{ secrets.DOCKER_USERNAME }}/node-web-app:latest docker://docker.io/${{ secrets.DOCKER_USERNAME }}/node-web-app:latest
        podman push ${{ secrets.DOCKER_USERNAME }}/node-web-app:${{ github.sha }} docker://docker.io/${{ secrets.DOCKER_USERNAME }}/node-web-app:${{ github.sha }}


  cd:
    needs: ci
    # runs-on: self-hosted  # Use the self-hosted linux
    runs-on: arc-runner-set
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # # Pull the latest Docker image from Docker Hub
    # - name: Pull latest Docker image
    #   run: |
    #     docker pull ${{ secrets.DOCKER_USERNAME }}/node-web-app:latest
    # Pull the latest image from the container registry
    - name: Pull latest image
      run: |
        podman pull ${{ secrets.REGISTRY_USERNAME }}/node-web-app:latest

    # Check if the container is already running
    - name: Check if container is running
      id: is_running
      run: |
        if [ $(podman  ps -a -q -f name=node-web-app) ]; then
          echo "container-running=true" >> $GITHUB_ENV
        else
          echo "container-running=false" >> $GITHUB_ENV
        fi

    # Stop and remove the existing container if running
    - name: Stop and remove running container
      if: env.container-running == 'true'
      run: |
        podman stop node-web-app
        podman rm node-web-app

    # Run the new container
    - name: Run new Docker container
      run: |
        podman run -d -p 3000:3000 --name node-web-app ${{ secrets.REGISTRY_USERNAME  }}/node-web-app:latest
